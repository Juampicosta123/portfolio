---
import Nextjs from '../components/icons/Nextjs.astro';
import Tailwind from '../components/icons/Tailwind.astro';
import GitHub from './icons/GitHub.astro';
import Web from './icons/Web.astro';
import AstroIcon from './icons/AstroIcon.astro';
import Express from './icons/Express.astro';
import React from './icons/React.astro';
import Mongodb from './icons/Mongodb.astro';
import LinkButton from './LinkButton.astro';

const TAGS = {
  NEXT: {
    name: 'Next.js',
    class: 'bg-black text-white',
    icon: Nextjs
  },
  TAILWIND: {
    name: 'Tailwind CSS',
    class: 'bg-[#003159] text-white',
    icon: Tailwind
  },
  ASTRO: {
    name: 'Astro',
    class: 'bg-[#362563] text-white',
    icon: AstroIcon
  },
  EXPRESS: {
    name: 'Express',
    class: 'bg-[#fff] text-black',
    icon: Express
  },
  REACT: {
    name: 'React',
    class: 'bg-[#23272f] text-white',
    icon: React
  },
  MONGODB: {
    name: 'Mongodb',
    class: 'bg-[#00684A] text-white',
    icon: Mongodb
  }
};

const PROJECTS = [
  {
    title: 'Spotify Clone',
    description:
      'Lo hice con fines de aprender. En el Frontend utilicé Astro y Tailwind, para algunos componentes usé React. En el Backend trabajé Express con Node.js y de Base de datos Mongodb. Además use View Transitions API que le da un toque al cambiar de ruta.',
    ghlink: 'github.com/react-redux-app',
    weblink: 'https://spoclonae.netlify.app/',
    image: '/spotifyclone.webp',
    tags: [TAGS.TAILWIND, TAGS.ASTRO, TAGS.REACT, TAGS.EXPRESS, TAGS.MONGODB]
  },
  {
    title: 'E-commerce con Tailwind y React',
    description:
      'Lorem ipsum dolor, sit amet consectetur adipisicing elit. Error hic quasi dolor repudiandae. Harum ab et autem, odio doloremque temporibus iure consequuntur omnis ducimus assumenda iste natus, veniam, ad sapiente!',
    ghlink: 'github.com',
    weblink: 'github.com',
    image: '/ecommerce.webp',
    tags: [TAGS.TAILWIND, TAGS.NEXT]
  }
];
---

{
  PROJECTS.map(({ title, description, tags, image, ghlink, weblink }) => (
    <article class='mb-10 bg-[rgb(25,31,45)] p-6 rounded'>
      <h3 class='text-lg sm:text-2xl font-semibold text-blue-400 mb-2 '>
        {title}
      </h3>
      <p class='text-sm mb-3 text-pretty'>{description}</p>
      <ul class='flex gap-2 flex-row mb-5 flex-wrap'>
        {tags.map((tag) => (
          <li>
            <span
              class={`flex gap-x-2 rounded-full text-xs sm:text-sm ${tag.class} items-center justify-center py-1 px-2`}
            >
              <tag.icon class='size-4' />
              {tag.name}
            </span>
          </li>
        ))}
      </ul>
      <img
        class='rounded shadow-xl shadow-white/10  block h-auto w-full max-w-[1280px]'
        src={image}
        alt={`Captura de pantalla del proyecto ${title} `}
      />
      <footer class='flex justify-start gap-x-2 pt-4 px-2'>
        <LinkButton href={ghlink}>
          <GitHub class='size-3 sm:size-5' />
          Ver código
        </LinkButton>
        <LinkButton href={weblink}>
          <Web class='size-3 sm:size-5' />
          Ver sitio web
        </LinkButton>
      </footer>
    </article>
  ))
}
